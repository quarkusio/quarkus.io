[{"configDocKey":{"type":"string","key":".credentials-provider","additionalKeys":[],"configDoc":"The `CredentialsProvider`. If this property is configured, then a matching 'CredentialsProvider' will be used to get the keystore, keystore key, and truststore passwords unless these passwords have already been configured.\n\nPlease note that using MicroProfile `ConfigSource` which is directly supported by Quarkus Configuration should be preferred unless using `CredentialsProvider` provides for some additional security and dynamism.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"credentials-provider","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_CREDENTIALS_PROVIDER","enum":false}},{"configDocKey":{"type":"string","key":".credentials-provider-name","additionalKeys":[],"configDoc":"The credentials provider bean name.\n\nThis is a bean name (as in `@Named`) of a bean that implements `CredentialsProvider`. It is used to select the credentials provider bean when multiple exist. This is unnecessary when there is only one credentials provider available.\n\nFor Vault, the credentials provider bean name is `vault-credentials-provider`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"credentials-provider-name","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_CREDENTIALS_PROVIDER_NAME","enum":false}},{"configDocKey":{"type":"path","key":".files","additionalKeys":[],"configDoc":"The list of path to server certificates using the PEM format. Specifying multiple files requires SNI to be enabled.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"files","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_FILES","enum":false}},{"configDocKey":{"type":"path","key":".key-files","additionalKeys":[],"configDoc":"The list of path to server certificates private key files using the PEM format. Specifying multiple files requires SNI to be enabled.\n\nThe order of the key files must match the order of the certificates.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-files","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_FILES","enum":false}},{"configDocKey":{"type":"path","key":".key-store-file","additionalKeys":[],"configDoc":"An optional keystore that holds the certificate information instead of specifying separate files.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-file","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_FILE","enum":false}},{"configDocKey":{"type":"string","key":".key-store-file-type","additionalKeys":[],"configDoc":"An optional parameter to specify the type of the keystore file. If not given, the type is automatically detected based on the file name.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-file-type","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_FILE_TYPE","enum":false}},{"configDocKey":{"type":"string","key":".key-store-provider","additionalKeys":[],"configDoc":"An optional parameter to specify a provider of the keystore file. If not given, the provider is automatically detected based on the keystore file type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-provider","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_PROVIDER","enum":false}},{"configDocKey":{"type":"string","key":".key-store-password","additionalKeys":[],"configDoc":"A parameter to specify the password of the keystore file. If not given, and if it can not be retrieved from `CredentialsProvider`.","withinAMap":false,"defaultValue":"password","javaDocSiteLink":"","docMapKey":"key-store-password","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":".key-store-password-key","additionalKeys":[],"configDoc":"A parameter to specify a `CredentialsProvider` property key, which can be used to get the password of the key store file from `CredentialsProvider`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-password-key","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"string","key":".key-store-alias","additionalKeys":[],"configDoc":"An optional parameter to select a specific key in the keystore. When SNI is disabled, and the keystore contains multiple keys and no alias is specified; the behavior is undefined.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-alias","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_ALIAS","enum":false}},{"configDocKey":{"type":"string","key":".key-store-alias-password","additionalKeys":[],"configDoc":"An optional parameter to define the password for the key, in case it is different from `key-store-password` If not given, it might be retrieved from `CredentialsProvider`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-alias-password","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_ALIAS_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":".key-store-alias-password-key","additionalKeys":[],"configDoc":"A parameter to specify a `CredentialsProvider` property key, which can be used to get the password for the alias from `CredentialsProvider`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"key-store-alias-password-key","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_KEY_STORE_ALIAS_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"path","key":".trust-store-file","additionalKeys":[],"configDoc":"An optional trust store that holds the certificate information of the trusted certificates.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-file","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_FILE","enum":false}},{"configDocKey":{"type":"path","key":".trust-store-files","additionalKeys":[],"configDoc":"An optional list of trusted certificates using the PEM format. If you pass multiple files, you must use the PEM format.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-files","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_FILES","enum":false}},{"configDocKey":{"type":"string","key":".trust-store-file-type","additionalKeys":[],"configDoc":"An optional parameter to specify the type of the trust store file. If not given, the type is automatically detected based on the file name.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-file-type","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_FILE_TYPE","enum":false}},{"configDocKey":{"type":"string","key":".trust-store-provider","additionalKeys":[],"configDoc":"An optional parameter to specify a provider of the trust store file. If not given, the provider is automatically detected based on the trust store file type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-provider","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_PROVIDER","enum":false}},{"configDocKey":{"type":"string","key":".trust-store-password","additionalKeys":[],"configDoc":"A parameter to specify the password of the trust store file. If not given, it might be retrieved from `CredentialsProvider`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-password","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_PASSWORD","enum":false}},{"configDocKey":{"type":"string","key":".trust-store-password-key","additionalKeys":[],"configDoc":"A parameter to specify a `CredentialsProvider` property key, which can be used to get the password of the trust store file from `CredentialsProvider`.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-password-key","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_PASSWORD_KEY","enum":false}},{"configDocKey":{"type":"string","key":".trust-store-cert-alias","additionalKeys":[],"configDoc":"An optional parameter to trust a single certificate from the trust store rather than trusting all certificates in the store.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"trust-store-cert-alias","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_TRUST_STORE_CERT_ALIAS","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":".reload-period","additionalKeys":[],"configDoc":"When set, the configured certificate will be reloaded after the given period. Note that the certificate will be reloaded only if the file has been modified.\n\nAlso, the update can also occur when the TLS certificate is configured using paths (and not in-memory).\n\nThe reload period must be equal or greater than 30 seconds. If not set, the certificate will not be reloaded.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"reload-period","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"","since":null,"environmentVariable":"_RELOAD_PERIOD","enum":false}}]