[{"configDocKey":{"type":"string","key":"quarkus.http.root-path","additionalKeys":[],"configDoc":"The HTTP root path. All web content will be served relative to this root path.","withinAMap":false,"defaultValue":"/","javaDocSiteLink":"","docMapKey":"root-path","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.http.auth.basic","additionalKeys":[],"configDoc":"If basic auth should be enabled. If both basic and form auth is enabled then basic auth will be enabled in silent mode. If no authentication mechanisms are configured basic auth is the default.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"basic","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.http.auth.form.enabled","additionalKeys":[],"configDoc":"If form authentication is enabled.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.http.auth.form.post-location","additionalKeys":[],"configDoc":"The post location.","withinAMap":false,"defaultValue":"/j_security_check","javaDocSiteLink":"","docMapKey":"post-location","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.http.auth.proactive","additionalKeys":[],"configDoc":"If this is true and credentials are present then a user will always be authenticated before the request progresses. If this is false then an attempt will only be made to authenticate the user if a permission check is performed or the current user is required for some other reason.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"proactive","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"io.vertx.core.http.ClientAuth","key":"quarkus.http.ssl.client-auth","additionalKeys":[],"configDoc":"Configures the engine to require/request client authentication. NONE, REQUEST, REQUIRED","withinAMap":false,"defaultValue":"none","javaDocSiteLink":"https://vertx.io/docs/apidocs/io/vertx/core/http/ClientAuth.html","docMapKey":"tls-client-auth","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":["`none`","`request`","`required`"],"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":true}},{"configDocKey":{"type":"boolean","key":"quarkus.http.virtual","additionalKeys":[],"configDoc":"If this is true then only a virtual channel will be set up for vertx web. We have this switch for testing purposes.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"virtual","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.http.non-application-root-path","additionalKeys":[],"configDoc":"A common root path for non-application endpoints. Various extension-provided endpoints such as metrics, health,\nand openapi are deployed under this path by default.\n\n* Relative path (Default, `q`) ->\nNon-application endpoints will be served from\n`${quarkus.http.root-path}/${quarkus.http.non-application-root-path}`.\n* Absolute path (`/q`) ->\nNon-application endpoints will be served from the specified path.\n* `${quarkus.http.root-path}` -> Setting this path to the same value as HTTP root path disables\nthis root path. All extension-provided endpoints will be served from `${quarkus.http.root-path}`.\n\nIf the management interface is enabled, the root path for the endpoints exposed on the management interface\nis configured using the `quarkus.management.root-path` property instead of this property.","withinAMap":false,"defaultValue":"q","javaDocSiteLink":"","docMapKey":"non-application-root-path","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.http.test-timeout","additionalKeys":[],"configDoc":"The REST Assured client timeout for testing.","withinAMap":false,"defaultValue":"30S","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"test-timeout","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.http.enable-compression","additionalKeys":[],"configDoc":"If enabled then the response body is compressed if the `Content-Type` header is set and the value is a compressed media type as configured via `compress-media-types`. Note that the RESTEasy Reactive and Reactive Routes extensions also make it possible to enable/disable compression declaratively using the annotations `io.quarkus.vertx.http.Compressed` and `io.quarkus.vertx.http.Uncompressed`.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enable-compression","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"boolean","key":"quarkus.http.enable-decompression","additionalKeys":[],"configDoc":"When enabled, vert.x will decompress the request's body if it's compressed. Note that the compression format (e.g., gzip) must be specified in the Content-Encoding header in the request.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"enable-decompression","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"string","key":"quarkus.http.compress-media-types","additionalKeys":[],"configDoc":"List of media types for which the compression should be enabled automatically, unless declared explicitly via `Compressed` or `Uncompressed`.","withinAMap":false,"defaultValue":"text/html,text/plain,text/xml,text/css,text/javascript,application/javascript,application/graphql+json","javaDocSiteLink":"","docMapKey":"compress-media-types","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}},{"configDocKey":{"type":"java.lang.Integer","key":"quarkus.http.compression-level","additionalKeys":[],"configDoc":"The compression level used when compression support is enabled.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"compression-level","configPhase":"BUILD_AND_RUN_TIME_FIXED","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.http","enum":false}}]