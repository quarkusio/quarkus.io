---  # document start

categories:
  - category: Core
    cat-id: core
    guides:
      - title: Configuring Your Application
        url: /guides/config
        description: Hardcoded values in your code is a no go (even if we all did it at some point ;-)). In this guide, we learn how to configure your application.
      - title: All Configuration Properties
        url: /guides/all-config
        description: List all the configuration properties per extensions
      - title: Application Initialization and Termination
        url: /guides/lifecycle
        description: You often need to execute custom actions when the application starts and clean up everything when the application stops. This guide explains how to be notified when an application stops or starts.
      - title: Contexts and Dependency Injection
        url: /guides/cdi-reference
        description: Quarkus DI solution is based on the [Contexts and Dependency Injection for Java 2.0](https://docs.jboss.org/cdi/spec/2.0/cdi-spec) specification. However, it is not a full CDI implementation verified by the TCK. Only a subset of the CDI features is implemented - see also the list of supported features and the list of limitations.
      - title: Testing Your Application
        url: /guides/getting-started-testing
        description: |
          This guide covers:
          
          * Testing in JVM mode
          * Testing in native mode
          * Injection of resources into tests
      - title: Configuring Logging
        url: /guides/logging
        description: This guide explains logging and how to configure it.
      - title: Using SSL With Native Images
        url: /guides/native-and-ssl
        description: In this guide, we will discuss how you can get your native images to support SSL, as native images don't support it out of the box.
      - title: Context Propagation
        url: /guides/context-propagation
        description: Learn more about how you can pass contextual information with our implementation of MicroProfile Context Propagation.
      - title: Writing Native Applications
        url: /guides/writing-native-applications-tips
        description: This guide is a collection of tips to help you solve the problems you encounter when compiling applications to native executable.
  - category: Web
    cat-id: web
    guides:
      - title: Writing REST JSON Services
        url: /guides/rest-json
        description: JSON is now the lingua franca between microservices. In this guide, we see how you can get your REST services to consume and produce JSON payloads.
      - title: Validation with Hibernate Validator
        url: /guides/validation
        description: This guide covers how to use Hibernate Validator/Bean Validation in your REST services.
      - title: Using the REST Client (including JSON)
        url: /guides/rest-client
        description: This guide explains how to use the MicroProfile REST Client in order to interact with REST APIs (JSON and other) with very little effort.
      - title: Using the REST Client with multipart
        url: /guides/rest-client-multipart
        description: This guide explains how to use the MicroProfile REST Client to send multipart REST requests, typically to upload documents.
      - title: Using JWT RBAC
        url: /guides/security-jwt
        description: This guide explains how your application can utilize MicroProfile JWT RBAC to provide secured access to the JAX-RS endpoints.
      - title: Using WebSockets
        url: /guides/websockets
        description: This guide explains how your Quarkus application can utilize web sockets to create interactive web applications. Because itâ€™s the canonical web socket application, we are going to create a simple chat application.
      - title: Using OpenAPI and Swagger UI
        url: /guides/openapi-swaggerui
        description: This guide explains how to use the OpenAPI extension to generate an OpenAPI descriptor and get a Swagger UI frontend to test your REST endpoints.
      - title: HTTP Reference Documentation
        url: /guides/http-reference
        description: Learn more about configuring Quarkus' Vert.x based HTTP layer - and Undertow if you are using servlets.
      - title: Using Fault Tolerance
        url: /guides/microprofile-fault-tolerance
        description: This guide demonstrates how your Quarkus application can utilize the MicroProfile Fault Tolerance specification through the SmallRye Fault Tolerance extension.
      - title: Using Reactive Routes
        url: /guides/reactive-routes
        description: This guide demonstrates how to use reactive routes.  
  - category: Data
    cat-id: data
    guides:
      - title: Configuring your datasources
        url: /guides/datasource
        description: With Quarkus, you can easily configure a datasource, or several if need be.
      - title: Using Hibernate ORM and JPA
        url: /guides/hibernate-orm
        description: Hibernate ORM is the de facto JPA implementation and offers you the full breath of an Object Relational Mapper. It works beautifully in Quarkus.
      - title: Simplified Hibernate ORM with Panache
        url: /guides/hibernate-orm-panache
        description: |
          Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper.
          
          It makes complex mappings possible, but it does not make simple and common mappings trivial.
          
          Panache focuses on making your entities trivial and fun to write.
      - title: Hibernate Search + Elasticsearch
        url: /guides/hibernate-search-elasticsearch
        description: Hibernate Search allows you to index your entities in an Elasticsearch cluster and easily offer full text search in all your Hibernate ORM-based applications.
      - title: Using Transactions
        url: /guides/transaction
        description: |
          Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.
          Each extension dealing with persistence will integrate with it for you.
          And you will explicitly interact with transactions via CDI.
          This guide will walk you through all that.
      - title: Validation with Hibernate Validator
        url: /guides/validation
        description: This guide covers how to use Hibernate Validator/Bean Validation in your REST services.
      - title: Cache your application data
        url: /guides/cache
        description: This guide explains how to cache expensive method calls of your CDI beans using simple annotations. 
      - title: Schema Migration with Flyway
        url: /guides/flyway
        description: This guide covers how to use the Flyway extension to manage your schema migrations.
      - title: Schema Migration with Liquibase
        url: /guides/liquibase
        description: This guide covers how to use the Liquibase extension to manage your schema migrations.
      - title: Using Infinispan Client
        url: /guides/infinispan-client
        description: Infinispan is an in memory data grid that allows running in a server outside of application processes. This extension provides functionality to allow the client that can connect to said server when running in Quarkus.
      - title: Reactive SQL Clients
        url: /guides/reactive-sql-clients
        description: This guide covers how to use the Reactive SQL Clients for MySQL and PostgreSQL in Quarkus.
      - title: MongoDB Client
        url: /guides/mongodb
        description: This guide covers how to use MongoDB in Quarkus.
      - title: MongoDB with Panache
        url: /guides/mongodb-panache
        description: This guide covers the usage of MongoDB using active records and repositories.
      - title: Neo4j Client
        url: /guides/neo4j
        description: This guide covers how to use the Neo4j graph database in Quarkus.
      - title: Amazon DynamoDB
        url: /guides/dynamodb
        description: This guide covers how to use the Amazon DynamoDB database in Quarkus.
      - title: Using Software Transactional Memory
        url: /guides/software-transactional-memory
        description: This guides covers the usage of Software Transactional Memory (STM)
  - category: Messaging
    cat-id: messaging
    guides:
      - title: Using Apache Kafka
        url: /guides/kafka
        description: This guide demonstrates how your Quarkus application can utilize MicroProfile Reactive Messaging to interact with Apache Kafka.
      - title: Using AMQP with Reactive Messaging
        url: /guides/amqp
        description: This guide demonstrates how your Quarkus application can utilize MicroProfile Reactive Messaging to interact with AMQP.
      - title: Using Apache Kafka Streams
        url: /guides/kafka-streams
        description: This guide demonstrates how your Quarkus application can utilize the Apache Kafka Streams API to implement stream processing applications based on Apache Kafka.
      - title: Asynchronous Message Passing
        url: /guides/reactive-messaging
        description: This guide explains how different beans can interact using asynchronous messages.  
      - title: Using JMS with Artemis
        url: /guides/jms
        description: This guide demonstrates how your Quarkus application can use Artemis JMS messaging.
        
  - category: Security
    cat-id: security
    guides:
      - title: Using OpenID Connect to Protect JAX-RS Applications
        url: /guides/security-openid-connect
        description: This guide demonstrates how your Quarkus application can use Keycloak to protect your JAX-RS applications using bearer token authorization, where these tokens are issued by a Keycloak server.
      - title: Protecting Web Applications Using OpenID Connect
        url: /guides/security-openid-connect-web-authentication
        description: This guide demonstrates how to use the OpenID Connect Extension to protect your web application based on the Authorization Code Flow using Quarkus.
      - title: Supporting Multi-Tenancy in OpenID Connect Applications
        url: /guides/security-openid-connect-multitenancy
        description: This guide demonstrates how your OpenID Connect application can support multi-tenancy so that you can serve multiple tenants from a single application.
      - title: Using Keycloak to centralize your authorizations
        url: /guides/security-keycloak-authorization
        description: This guide demonstrates how your Quarkus application can authorize access to protected resources using Keycloak Authorization Services.
      - title: Using Security
        url: /guides/security
        description: This quide demonstrates integration with the Elytron security subsystem to allow for RBAC based on the common security annotations `@RolesAllowed`, `@DenyAll`, `@PermitAll` on REST endpoints.
      - title: Using Vault
        url: /guides/vault
        description: This quide explains how you can use HashiCorp Vault to securely store your credentials in Quarkus.
      - title: Using Vault Transit Secret Engine
        url: /guides/vault-transit
        description: This quide explains how you can use HashiCorp Vault for "encryption as a service".
      - title: Using JWT RBAC
        url: /guides/security-jwt
        description: This guide explains how your application can utilize MicroProfile JWT RBAC to provide secured access to the JAX-RS endpoints.
      - title: Using OAuth2 RBAC
        url: /guides/security-oauth2
        description: This guide explains how your Quarkus application can utilize OAuth2 tokens to provide secured access to the JAX-RS endpoints.
      - title: Using Security from JPA
        url: /guides/security-jpa
        description: This guide demonstrates how your Quarkus application can use a database to store your user identities with Hibernate ORM.
      - title: Using Security with JDBC Realm
        url: /guides/security-jdbc
        description: This guide demonstrates how your Quarkus application can use a database to store your user identities.
  - category: Business Automation
    cat-id: business-automation
    guides:
      - title: Using Kogito to add business automation capabilities to an application
        url: /guides/kogito
        description: This guide demonstrates how your Quarkus application can use Kogito to add business automation to power it up with business processes and rules.
      - title: Using AI to optimize a schedule with OptaPlanner
        url: /guides/optaplanner
        description: This guide walks you through the process of creating a Quarkus application with OptaPlanner's constraint solving Artificial Intelligence (AI).
  - category: Integration
    cat-id: integration
    guides:
      - title: Apache Camel
        url: /guides/camel
        description: This guide covers the systems integration with Apache Camel
  - category: Cloud
    cat-id: cloud
    guides:
      - title: Build Container Images
        url: /guides/container-image
        description: Learn how to build and push container images with Jib, S2I or Docker as part of the Quarkus build.
      - title: Deploying Quarkus Applications on Kubernetes
        url: /guides/kubernetes
        description: This guide covers how to deploy a native application on Kubernetes.
      - title: Deploying Quarkus Applications on OpenShift
        url: /guides/deploying-to-openshift
        description: This guide covers how to deploy a native application on OpenShift.
      - title: Deploying to OpenShift using S2I
        url: /guides/deploying-to-openshift-s2i
        description: This guide explains how to deploy a Quarkus application to OpenShift using S2I.
      - title: Deploying Native Applications on Knative Kubernetes or OpenShift
        url: /guides/getting-started-knative
        description: This guide demonstrates how to deploy an application on Knative Kubernetes or OpenShift.
      - title: Using the Kubernetes Client to Interact with a Kubernetes Cluster
        url: /guides/kubernetes-client
        description: This guide demonstrates how to use the Fabric8 Kubernetes client to interact with your Kubernetes cluster.
      - title: Deploying to Microsoft Azure Cloud
        url: /guides/deploying-to-azure-cloud
        description: This guide explains how to deploy a Quarkus application to Microsoft Azure Cloud.
      - title: Azure Functions (Serverless) with Vert.x Web, Servlet, or RESTEasy
        url: /guides/azure-functions-http
        description: This guide explains how you can deploy Vert.x Web, Servlet, or RESTEasy microservices as an Azure Function.
      - title: Amazon Lambda
        url: /guides/amazon-lambda
        description: This guide explains how you can deploy Quarkus-based Amazon Lambdas.
      - title: Amazon Lambda with Vert.x Web, Servlet, or RESTEasy
        url: /guides/amazon-lambda-http
        description: This guide explains how you can deploy Vert.x Web, Servlet, or RESTEasy microservices as an Amazon Lambda.
  - category: Observability
    cat-id: observability
    guides:
      - title: Using Health Check
        url: /guides/microprofile-health
        description: This guide demonstrates how your Quarkus application can utilize the MicroProfile Health specification through the SmallRye Health extension.
      - title: Using OpenTracing
        url: /guides/opentracing
        description: This guide explains how your Quarkus application can utilize OpenTracing to provide distributed tracing for interactive web applications.
      - title: Collecting Metrics
        url: /guides/microprofile-metrics
        description: This guide demonstrates how your Quarkus application can utilize the MicroProfile Metrics specification through the SmallRye Metrics extension.
      - title: Using Fault Tolerance
        url: /guides/microprofile-fault-tolerance
        description: This guide demonstrates how your Quarkus application can utilize the MicroProfile Fault Tolerance specification through the SmallRye Fault Tolerance extension.
      - title: Using Sentry to Monitor your Logs
        url: /guides/logging-sentry
        description: This guide explains how to use Sentry to monitor your application and be notified when exceptions occur. 
      - title: Centralized Log Management 
        url: /guides/centralized-log-management
        description: This guide explains how to centralize your logs with Logstash or Fluentd using the Graylog Extended Log Format (GELF).
  - category: Serialization
    cat-id: serialization
    guides:
      - title: Writing REST JSON Services
        url: /guides/rest-json
        description: JSON is now the lingua franca between microservices. In this guide, we see how you can get your REST services to consume and produce JSON payloads.
  - category: Tooling
    cat-id: tooling
    guides:
      - title: Building Applications with Maven
        url: /guides/maven-tooling
        description: |
          This guide covers:
          
          * Maven configuration
          * Creating a new project
          * Dealing with extensions
          * Development mode
          * Debugging
          * Import in your IDE
          * Building a native image
          * Build a container friendly executable
      - title: Building Applications with Gradle
        url: /guides/gradle-tooling
        description: |
          This guide covers:
          
          * Gradle configuration
          * Creating a new project
          * Dealing with extensions
          * Development mode
          * Debugging
          * Import in your IDE
          * Building a native image
          * Build a container friendly executable
      - title: Measuring the coverage of your tests
        url: /guides/tests-with-coverage
        description: This guide explains how to measure the test coverage of your Quarkus application.
  - category: Compatibility
    cat-id: compatibility
    guides:
      - title: Using the Quarkus Extension for Spring DI API
        url: /guides/spring-di
        description: While you are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the spring-di extension.
      - title: Using the Quarkus Extension for Spring Web API
        url: /guides/spring-web
        description: While you are encouraged to use JAX-RS annotations for defining REST endpoints, Quarkus provides a compatibility layer for Spring Web in the form of the spring-web extension.
      - title: Using the Quarkus Extension for Spring Data JPA API
        url: /guides/spring-data-jpa
        description: While you are encouraged to use Hibernate ORM with Panache for your data layer, Quarkus provides a compatibility layer for Spring Data JPA in the form of the spring-data-jpa extension.
      - title: Using the Quarkus Extension for Spring Security API
        url: /guides/spring-security
        description: While you are encouraged to use the Quarkus security layer to secure your applications, Quarkus provides a compatibility layer for Spring Security in the form of the spring-security extension.
      - title: Using the Quarkus Extension for Spring Cloud Config
        url: /guides/spring-cloud-config-client
        description: Quarkus provides a compatibility layer for Spring Cloud Config in the form of the spring-cloud-config-client extension.
  - category: Writing Extensions
    cat-id: writing-extensions
    guides:
      - title: Writing Your Own Extension
        url: /guides/writing-extensions
        description: |
          Quarkus extensions add a new developer focused behavior to the core offering, and consist of two distinct parts, buildtime augmentation and runtime container. The augmentation part is responsible for all metadata processing, such as reading annotations, XML descriptors etc. The output of this augmentation phase is recorded bytecode which is responsible for directly instantiating the relevant runtime services.
          
          This means that metadata is only processed once at build time, which both saves on startup time, and also on memory usage as the classes etc that are used for processing are not loaded (or even present) in the runtime JVM.
      - title: Writing Native Applications
        url: /guides/writing-native-applications-tips
        description: This guide is a collection of tips to help you solve the problems you encounter when compiling applications to native executable.
      - title: Class Loading Reference
        url: /guides/class-loading-reference
        description: Learn more about Quarkus class loading infrastructure.
  - category: Alternative Languages
    cat-id: alternative-languages
    guides:
      - title: Using Kotlin
        url: /guides/kotlin
        description: This guide explains how to use Kotlin.
  - category: Miscellaneous
    cat-id: miscellaneous
    guides:
      - title: Scheduling Periodic Tasks
        url: /guides/scheduler
        description: Modern applications often need to run specific tasks periodically. In this guide, you learn how to schedule periodic tasks.
      - title: Scheduling Clustered Tasks with Quartz
        url: /guides/quartz
        description: You need clustering support for your scheduled tasks? This guide explains how to use the Quartz extension for that.
      - title: Sending Emails
        url: /guides/mailer
        description: Learn more about how you can send email from a Quarkus application with our reactive email client.
      - title: Templating with Qute
        url: /guides/qute
        description: Learn more about how you can use templating in your applications with the Qute template engine. 
      - title: Qute Reference Guide
        url: /guides/qute-reference
        description: Learn everything you need to know about the Qute template engine.
      - title: Extracting Content with Apache Tika
        url: /guides/tika
        description: Learn more about how you extract content from documents using the Apache Tika toolkit.
      - title: Using Vert.x
        url: /guides/vertx
        description: This guide explains how to use Vert.x in Quarkus to build reactive applications.
      - title: Access Git repositories with JGit
        url: /guides/jgit
        description: This guide explains how you can access Git repositories with JGit.
      - title: Measuring Performance
        url: /guides/performance-measure
        description: When measuring the footprint of a Quarkus application, we measure Resident Set Size (RSS) and not the JVM heap size which is only a small part of the overall problem. The JVM not only allocates native memory for heap (`-Xms`, `-Xmx`) but also structures required by the jvm to run your application.

