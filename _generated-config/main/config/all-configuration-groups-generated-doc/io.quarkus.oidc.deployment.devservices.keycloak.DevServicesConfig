[{"configDocKey":{"type":"boolean","key":".enabled","configDoc":"If DevServices has been explicitly enabled or disabled. \n When DevServices is enabled Quarkus will attempt to automatically configure and start Keycloak when running in Dev or Test mode and when Docker is running.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"enabled","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".image-name","configDoc":"The container image name to use, for container based DevServices providers.","withinAMap":false,"defaultValue":"quay.io/keycloak/keycloak:14.0.0","javaDocSiteLink":"","docMapKey":"image-name","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".shared","configDoc":"Indicates if the Keycloak container managed by Quarkus Dev Services is shared. When shared, Quarkus looks for running containers using label-based service discovery. If a matching container is found, it is used, and so a second one is not started. Otherwise, Dev Services for Keycloak starts a new container. \n The discovery uses the `quarkus-dev-service-label` label. The value is configured using the `service-name` property. \n Container sharing is only used in dev mode.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"shared","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".service-name","configDoc":"The value of the `quarkus-dev-service-keycloak` label attached to the started container. This property is used when `shared` is set to `true`. In this case, before starting a container, Dev Services for Keycloak looks for a container with the `quarkus-dev-service-keycloak` label set to the configured value. If found, it will use this container instead of starting a new one. Otherwise it starts a new container with the `quarkus-dev-service-keycloak` label set to the specified value. \n Container sharing is only used in dev mode.","withinAMap":false,"defaultValue":"quarkus","javaDocSiteLink":"","docMapKey":"service-name","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".realm-path","configDoc":"The class or file system path to a Keycloak realm file which will be used to initialize Keycloak.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"realm-path","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".java-opts","configDoc":"The JAVA_OPTS passed to the keycloak JVM","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"java-opts","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".realm-name","configDoc":"The Keycloak realm name. This property will be used to create the realm if the realm file pointed to by the 'realm-path' property does not exist, default value is 'quarkus' in this case. If the realm file pointed to by the 'realm-path' property exists then it is still recommended to set this property for Dev Services for Keycloak to avoid parsing the realm file in order to determine the realm name.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"realm-name","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".create-realm","configDoc":"Indicates if the Keycloak realm has to be created when the realm file pointed to by the 'realm-path' property does not exist. Disable it if you'd like to create a realm using Keycloak Administration Console or Keycloak Admin API from `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"create-realm","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"`Map<String,String>`","key":".users","configDoc":"The Keycloak users map containing the user name and password pairs. If this map is empty then two users, 'alice' and 'bob' with the passwords matching their names will be created. This property will be used to create the Keycloak users if the realm file pointed to by the 'realm-path' property does not exist.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"users","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":true,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"`Map<String,String>`","key":".roles","configDoc":"The Keycloak user roles. If this map is empty then a user named 'alice' will get 'admin' and 'user' roles and all other users will get a 'user' role. This property will be used to create the Keycloak roles if the realm file pointed to by the 'realm-path' property does not exist.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"roles","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":true,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocSection":{"name":"","optional":false,"withinAMap":false,"sectionDetails":null,"sectionDetailsTitle":".grant","configPhase":"BUILD_TIME","topLevelGrouping":"","configGroupType":"io.quarkus.oidc.deployment.devservices.keycloak.DevServicesConfig.Grant","showSection":false,"configDocItems":[{"configDocKey":{"type":"io.quarkus.oidc.deployment.devservices.keycloak.DevServicesConfig.Grant.Type","key":".grant.type","configDoc":"Grant type which will be used to acquire a token to test the OIDC 'service' applications","withinAMap":false,"defaultValue":"code","javaDocSiteLink":"","docMapKey":"type","configPhase":"BUILD_TIME","acceptedValues":["client","password","code","implicit"],"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}}],"anchorPrefix":null}},{"configDocKey":{"type":"java.lang.Integer","key":".port","configDoc":"Optional fixed port the dev service will listen to. \n If not defined, the port will be chosen randomly.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"port","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"java.time.Duration","key":".web-clien-timeout","configDoc":"The WebClient timeout. Use this property to configure how long an HTTP client will wait for a response when requesting tokens from Keycloak and sending them to the service endpoint.","withinAMap":false,"defaultValue":"4S","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"web-clien-timeout","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}}]