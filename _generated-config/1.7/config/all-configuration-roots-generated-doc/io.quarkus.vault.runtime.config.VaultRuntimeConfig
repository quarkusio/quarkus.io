[{"configDocKey":{"type":"java.net.URL","key":"quarkus.vault.url","configDoc":"Vault server url.\n<p>\nExample: https://localhost:8200\n<p>\nSee also the documentation for the `kv-secret-engine-mount-path` property for some insights on how\nthe full Vault url gets built.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/net/URL.html","docMapKey":"url","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocSection":{"name":"quarkus.vault.authentication","optional":false,"withinAMap":false,"sectionDetails":"= Authentication","sectionDetailsTitle":"Authentication","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.vault","configGroupType":"io.quarkus.vault.runtime.config.VaultAuthenticationConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.client-token","configDoc":"Vault token, bypassing Vault authentication (kubernetes, userpass or approle). This is useful in development where an authentication mode might not have been set up. In production we will usually prefer some authentication such as userpass, or preferably kubernetes, where Vault tokens get generated with a TTL and some ability to revoke them. Lease renewal does not apply.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"client-token","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.client-token-wrapping-token","configDoc":"Client token wrapped in a wrapping token, such as what is returned by: \n vault token create -wrap-ttl=60s -policy=myapp \n client-token and client-token-wrapping-token are exclusive. Lease renewal does not apply.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"client-token-wrapping-token","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.app-role.role-id","configDoc":"Role Id for AppRole auth method. This property is required when selecting the app-role authentication type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"role-id","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.app-role.secret-id","configDoc":"Secret Id for AppRole auth method. This property is required when selecting the app-role authentication type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"secret-id","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.app-role.secret-id-wrapping-token","configDoc":"Wrapping token containing a Secret Id, obtained from: \n vault write -wrap-ttl=60s -f auth/approle/role/myapp/secret-id \n secret-id and secret-id-wrapping-token are exclusive","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"secret-id-wrapping-token","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.userpass.username","configDoc":"User for userpass auth method. This property is required when selecting the userpass authentication type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"username","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.userpass.password","configDoc":"Password for userpass auth method. This property is required when selecting the userpass authentication type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.userpass.password-wrapping-token","configDoc":"Wrapping token containing a Password, obtained from: \n vault kv get -wrap-ttl=60s secret/ \n The key has to be 'password', meaning the password has initially been provisioned with: \n vault kv put secret/ password= \n password and password-wrapping-token are exclusive","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"password-wrapping-token","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.kubernetes.role","configDoc":"Kubernetes authentication role that has been created in Vault to associate Vault policies, with Kubernetes service accounts and/or Kubernetes namespaces. This property is required when selecting the Kubernetes authentication type.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"role","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.kubernetes.jwt-token-path","configDoc":"Location of the file containing the Kubernetes JWT token to authenticate against in Kubernetes authentication mode.","withinAMap":false,"defaultValue":"/var/run/secrets/kubernetes.io/serviceaccount/token","javaDocSiteLink":"","docMapKey":"jwt-token-path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.authentication.kubernetes.auth-mount-path","configDoc":"Allows configure Kubernetes authentication mount path.","withinAMap":false,"defaultValue":"auth/kubernetes","javaDocSiteLink":"","docMapKey":"auth-mount-path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}}],"anchorPrefix":null}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.vault.renew-grace-period","configDoc":"Renew grace period duration.\n<p>\nThis value if used to extend a lease before it expires its ttl, or recreate a new lease before the current\nlease reaches its max_ttl.\nBy default Vault leaseDuration is equal to 7 days (ie: 168h or 604800s).\nIf a connection pool maxLifetime is set, it is reasonable to set the renewGracePeriod to be greater\nthan the maxLifetime, so that we are sure we get a chance to renew leases before we reach the ttl.\nIn any case you need to make sure there will be attempts to fetch secrets within the renewGracePeriod,\nbecause that is when the renewals will happen. This is particularly important for db dynamic secrets\nbecause if the lease reaches its ttl or max_ttl, the password of the db user will become invalid and\nit will be not longer possible to log in.\nThis value should also be smaller than the ttl, otherwise that would mean that we would try to recreate\nleases all the time.","withinAMap":false,"defaultValue":"1H","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"renew-grace-period","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.vault.secret-config-cache-period","configDoc":"Vault config source cache period.\n<p>\nProperties fetched from vault as MP config will be kept in a cache, and will not be fetched from vault\nagain until the expiration of that period.\nThis property is ignored if `secret-config-kv-path` is not set.","withinAMap":false,"defaultValue":"10M","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"secret-config-cache-period","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.secret-config-kv-path","configDoc":"List of comma separated vault paths in kv store,\nwhere all properties will be available as MP config properties **as-is**, with no prefix.\n<p>\nFor instance, if vault contains property `foo`, it will be made available to the\nquarkus application as `@ConfigProperty(name = \"foo\") String foo;`\n<p>\nIf 2 paths contain the same property, the last path will win.\n<p>\nFor instance if\n<p>\n* `secret/base-config` contains `foo=bar` and\n* `secret/myapp/config` contains `foo=myappbar`, then\n<p>\n`@ConfigProperty(name = \"foo\") String foo` will have value `myappbar`\nwith application properties `quarkus.vault.secret-config-kv-path=base-config,myapp/config`\n<p>\nSee also the documentation for the `kv-secret-engine-mount-path` property for some insights on how\nthe full Vault url gets built.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"secret-config-kv-path","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"`Map<String,List<String>>`","key":"quarkus.vault.secret-config-kv-path.\"prefix\"","configDoc":"List of comma separated vault paths in kv store,\nwhere all properties will be available as **prefixed** MP config properties.\n<p>\nFor instance if the application properties contains\n`quarkus.vault.secret-config-kv-path.myprefix=config`, and\nvault path `secret/config` contains `foo=bar`, then `myprefix.foo`\nwill be available in the MP config.\n<p>\nIf the same property is available in 2 different paths for the same prefix, the last one\nwill win.\n<p>\nSee also the documentation for the `kv-secret-engine-mount-path` property for some insights on how\nthe full Vault url gets built.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"secret-config-kv-prefix-path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":true,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"io.quarkus.vault.runtime.LogConfidentialityLevel","key":"quarkus.vault.log-confidentiality-level","configDoc":"Used to hide confidential infos, for logging in particular.\nPossible values are:\n<p>\n* low: display all secrets.\n* medium: display only usernames and lease ids (ie: passwords and tokens are masked).\n* high: hide lease ids and dynamic credentials username.","withinAMap":false,"defaultValue":"medium","javaDocSiteLink":"","docMapKey":"log-confidentiality-level","configPhase":"RUN_TIME","acceptedValues":["low","medium","high"],"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"int","key":"quarkus.vault.kv-secret-engine-version","configDoc":"Kv secret engine version.\n<p>\nsee https://www.vaultproject.io/docs/secrets/kv/index.html","withinAMap":false,"defaultValue":"2","javaDocSiteLink":"","docMapKey":"kv-secret-engine-version","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.kv-secret-engine-mount-path","configDoc":"KV secret engine path.\n<p>\nThis value is used when building the url path in the KV secret engine programmatic access\n(i.e. `VaultKVSecretEngine`) and the vault config source (i.e. fetching configuration properties from Vault).\n<p>\nFor a v2 KV secret engine (default - see `kv-secret-engine-version property`)\nthe full url is built from the expression `<url>/v1/</kv-secret-engine-mount-path>/data/...`.\n<p>\nWith property `quarkus.vault.url=https://localhost:8200`, the following call\n`vaultKVSecretEngine.readSecret(\"foo/bar\")` would lead eventually to a `GET` on Vault with the following\nurl: `https://localhost:8200/v1/secret/data/foo/bar`.\n<p>\nWith a KV secret engine v1, the url changes to: `<url>/v1/</kv-secret-engine-mount-path>/...`.\n<p>\nThe same logic is applied to the Vault config source. With `quarkus.vault.secret-config-kv-path=config/myapp`\nThe secret properties would be fetched from Vault using a `GET` on\n`https://localhost:8200/v1/secret/data/config/myapp` for a KV secret engine v2 (or\n`https://localhost:8200/v1/secret/config/myapp` for a KV secret engine v1).\n<p>\nsee https://www.vaultproject.io/docs/secrets/kv/index.html","withinAMap":false,"defaultValue":"secret","javaDocSiteLink":"","docMapKey":"kv-secret-engine-mount-path","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocSection":{"name":"quarkus.vault.tls","optional":false,"withinAMap":false,"sectionDetails":"= TLS","sectionDetailsTitle":"TLS","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.vault","configGroupType":"io.quarkus.vault.runtime.config.VaultTlsConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"boolean","key":"quarkus.vault.tls.skip-verify","configDoc":"Allows to bypass certificate validation on TLS communications. \n If true this will allow TLS communications with Vault, without checking the validity of the certificate presented by Vault. This is discouraged in production because it allows man in the middle type of attacks.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"skip-verify","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.tls.ca-cert","configDoc":"Certificate bundle used to validate TLS communications with Vault. \n The path to a pem bundle file, if TLS is required, and trusted certificates are not set through javax.net.ssl.trustStore system property.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"ca-cert","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"boolean","key":"quarkus.vault.tls.use-kubernetes-ca-cert","configDoc":"If true and Vault authentication type is kubernetes, TLS will be active and the cacert path will be set to /var/run/secrets/kubernetes.io/serviceaccount/ca.crt. If set, this setting will take precedence over property quarkus.vault.tls.ca-cert. This means that if Vault authentication type is kubernetes and we want to use quarkus.vault.tls.ca-cert or system property javax.net.ssl.trustStore, then this property should be set to false.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"use-kubernetes-ca-cert","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}}],"anchorPrefix":null}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.vault.connect-timeout","configDoc":"Timeout to establish a connection with Vault.","withinAMap":false,"defaultValue":"5S","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"connect-timeout","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"java.time.Duration","key":"quarkus.vault.read-timeout","configDoc":"Request timeout on Vault.","withinAMap":false,"defaultValue":"1S","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"read-timeout","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":false,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.credentials-provider.\"credentials-provider\".database-credentials-role","configDoc":"Database credentials role, as defined by https://www.vaultproject.io/docs/secrets/databases/index.html\n\nOne of `database-credentials-role` or `kv-path` needs to be defined. not both.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"database-credentials-role","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.credentials-provider.\"credentials-provider\".kv-path","configDoc":"A path in vault kv store, where we will find the kv-key.\n\nOne of `database-credentials-role` or `kv-path` needs to be defined. not both.\n\nsee https://www.vaultproject.io/docs/secrets/kv/index.html","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"kv-path","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.credentials-provider.\"credentials-provider\".kv-key","configDoc":"Key name to search in vault path `kv-path`. The value for that key is the credential.\n\n`kv-key` should not be defined if `kv-path` is not.\n\nsee https://www.vaultproject.io/docs/secrets/kv/index.html","withinAMap":true,"defaultValue":"password","javaDocSiteLink":"","docMapKey":"kv-key","configPhase":"RUN_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocSection":{"name":"quarkus.vault.transit","optional":false,"withinAMap":false,"sectionDetails":"= Transit Engine","sectionDetailsTitle":"Transit Engine","configPhase":"RUN_TIME","topLevelGrouping":"quarkus.vault","configGroupType":"io.quarkus.vault.runtime.config.VaultTransitConfig","showSection":true,"configDocItems":[{"configDocKey":{"type":"string","key":"quarkus.vault.transit.key.\"key\".name","configDoc":"Specifies the name of the key to use. By default this will be the property key alias. Used when\nthe same transit key is used with different configurations. Such as in:\n```\nquarkus.vault.transit.key.my-foo-key.name=foo\n\nquarkus.vault.transit.key.my-foo-key-with-prehashed.name=foo\nquarkus.vault.transit.key.my-foo-key-with-prehashed.prehashed=true\n...\ntransitSecretEngine.sign(\"my-foo-key\", \"my raw content\");\nor\ntransitSecretEngine.sign(\"my-foo-key-with-prehashed\", \"my already hashed content\");\n```","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"name","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"java.lang.Boolean","key":"quarkus.vault.transit.key.\"key\".prehashed","configDoc":"Set to true when the input is already hashed. Applies to sign operations.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"prehashed","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.transit.key.\"key\".signature-algorithm","configDoc":"When using a RSA key, specifies the RSA signature algorithm. Applies to sign operations.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"signature-algorithm","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.transit.key.\"key\".hash-algorithm","configDoc":"Specifies the hash algorithm to use for supporting key types. Applies to sign operations.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"hash-algorithm","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.transit.key.\"key\".type","configDoc":"Specifies the type of key to create for the encrypt operation. Applies to encrypt operations.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"type","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}},{"configDocKey":{"type":"string","key":"quarkus.vault.transit.key.\"key\".convergent-encryption","configDoc":"If enabled, the key will support convergent encryption, where the same plaintext creates the same ciphertext. Applies to encrypt operations.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"convergent-encryption","configPhase":"RUN_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":"quarkus.vault"}}],"anchorPrefix":null}}]