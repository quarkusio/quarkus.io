[{"configDocKey":{"type":"string","key":".redirect-path","configDoc":"Relative path for calculating a \"redirect_uri\" query parameter. It has to start from a forward slash and will be appended to the request URI's host and port. For example, if the current request URI is 'https://localhost:8080/service' then a 'redirect_uri' parameter will be set to 'https://localhost:8080/' if this property is set to '/' and be the same as the request URI if this property has not been configured. Note the original request URI will be restored after the user has authenticated.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"redirect-path","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".restore-path-after-redirect","configDoc":"If this property is set to 'true' then the original request URI which was used before the authentication will be restored after the user has been redirected back to the application.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"restore-path-after-redirect","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".remove-redirect-parameters","configDoc":"Remove the query parameters such as 'code' and 'state' set by the OIDC server on the redirect URI after the user has authenticated by redirecting a user to the same URI but without the query parameters.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"remove-redirect-parameters","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".verify-access-token","configDoc":"Both ID and access tokens are fetched from the OIDC provider as part of the authorization code flow. ID token is always verified on every user request as the primary token which is used to represent the principal and extract the roles. Access token is not verified by default since it is meant to be propagated to the downstream services. The verification of the access token should be enabled if it is injected as a JWT token. Access tokens obtained as part of the code flow will always be verified if `quarkus.oidc.roles.source` property is set to `accesstoken` which means the authorization decision will be based on the roles extracted from the access token. Bearer access tokens are always verified.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"verify-access-token","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".force-redirect-https-scheme","configDoc":"Force 'https' as the 'redirect_uri' parameter scheme when running behind an SSL terminating reverse proxy. This property, if enabled, will also affect the logout `post_logout_redirect_uri` and the local redirect requests.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"force-redirect-https-scheme","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".scopes","configDoc":"List of scopes","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"scopes","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":true,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"`Map<String,String>`","key":".extra-params","configDoc":"Additional properties which will be added as the query parameters to the authentication redirect URI.","withinAMap":true,"defaultValue":"","javaDocSiteLink":"","docMapKey":"extra-params","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":true,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".cookie-path","configDoc":"Cookie path parameter value which, if set, will be used for the session and state cookies. It may need to be set when the redirect path has a root different to that of the original request URL.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"cookie-path","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".user-info-required","configDoc":"If this property is set to 'true' then an OIDC UserInfo endpoint will be called","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"user-info-required","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"java.time.Duration","key":".session-age-extension","configDoc":"Session age extension in minutes. The user session age property is set to the value of the ID token life-span by default and the user will be redirected to the OIDC provider to re-authenticate once the session has expired. If this property is set to a non-zero value then the expired ID token can be refreshed before the session has expired. This property will be ignored if the `token.refresh-expired` property has not been enabled.","withinAMap":false,"defaultValue":"5M","javaDocSiteLink":"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html","docMapKey":"session-age-extension","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".xhr-auto-redirect","configDoc":"If this property is set to 'true' then a normal 302 redirect response will be returned if the request was initiated via XMLHttpRequest and the current user needs to be (re)authenticated which may not be desirable for Single Page Applications since XMLHttpRequest automatically following the redirect may not work given that OIDC authorization endpoints typically do not support CORS. If this property is set to `false` then a status code of '499' will be returned to allow the client to handle the redirect manually","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"xhr-auto-redirect","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}}]