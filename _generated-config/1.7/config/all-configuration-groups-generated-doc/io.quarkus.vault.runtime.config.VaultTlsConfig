[{"configDocKey":{"type":"boolean","key":".skip-verify","configDoc":"Allows to bypass certificate validation on TLS communications. \n If true this will allow TLS communications with Vault, without checking the validity of the certificate presented by Vault. This is discouraged in production because it allows man in the middle type of attacks.","withinAMap":false,"defaultValue":"false","javaDocSiteLink":"","docMapKey":"skip-verify","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"string","key":".ca-cert","configDoc":"Certificate bundle used to validate TLS communications with Vault. \n The path to a pem bundle file, if TLS is required, and trusted certificates are not set through javax.net.ssl.trustStore system property.","withinAMap":false,"defaultValue":"","javaDocSiteLink":"","docMapKey":"ca-cert","configPhase":"BUILD_TIME","acceptedValues":null,"optional":true,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}},{"configDocKey":{"type":"boolean","key":".use-kubernetes-ca-cert","configDoc":"If true and Vault authentication type is kubernetes, TLS will be active and the cacert path will be set to /var/run/secrets/kubernetes.io/serviceaccount/ca.crt. If set, this setting will take precedence over property quarkus.vault.tls.ca-cert. This means that if Vault authentication type is kubernetes and we want to use quarkus.vault.tls.ca-cert or system property javax.net.ssl.trustStore, then this property should be set to false.","withinAMap":false,"defaultValue":"true","javaDocSiteLink":"","docMapKey":"use-kubernetes-ca-cert","configPhase":"BUILD_TIME","acceptedValues":null,"optional":false,"list":false,"passThroughMap":false,"withinAConfigGroup":true,"topLevelGrouping":""}}]